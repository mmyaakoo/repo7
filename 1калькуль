using System;

public class Calculator<T>
{
    public delegate T OperationDelegate(T x, T y);

    public OperationDelegate Add { get; set; }
    public OperationDelegate Subtract { get; set; }
    public OperationDelegate Multiply { get; set; }
    public OperationDelegate Divide { get; set; }

    public Calculator()
    {
        Add = (x, y) => Operator<T>.Add(x, y);
        Subtract = (x, y) => Operator<T>.Subtract(x, y);
        Multiply = (x, y) => Operator<T>.Multiply(x, y);
        Divide = (x, y) => Operator<T>.Divide(x, y);
    }

    public T PerformOperation(OperationDelegate operation, T x, T y)
    {
        return operation(x, y);
    }
}

public static class Operator<T>
{
    public static T Add(T x, T y) => (dynamic)x + y;
    public static T Subtract(T x, T y) => (dynamic)x - y;
    public static T Multiply(T x, T y) => (dynamic)x * y;
    public static T Divide(T x, T y) => (dynamic)x / y;
}

class Program
{
    static void Main()
    {
        Calculator<int> intCalculator = new Calculator<int>();
        Console.WriteLine($"Addition: {intCalculator.PerformOperation(intCalculator.Add, 5, 3)}");

        Calculator<double> doubleCalculator = new Calculator<double>();
        Console.WriteLine($"Multiplication: {doubleCalculator.PerformOperation(doubleCalculator.Multiply, 2.5, 3.0)}");
    }
}
